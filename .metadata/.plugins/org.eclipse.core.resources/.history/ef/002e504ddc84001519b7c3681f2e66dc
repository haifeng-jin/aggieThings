package aggregator;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.concurrent.BlockingQueue;

import common.DataItem;
import common.PortInfo;

public class Uploader implements Runnable {

	BlockingQueue<DataItem> uploadBuffer;

	public Uploader(BlockingQueue<DataItem> uploadBuffer) {
		this.uploadBuffer = uploadBuffer;
	}

	public void run() {
		while (true) {
			try {
				DataItem item = uploadBuffer.take();
				String serverAddress;
				Socket socketClient = new Socket(serverAddress,
						PortInfo.getServerPort());
				ObjectOutputStream outputStream = new ObjectOutputStream(
						socketClient.getOutputStream());

				outputStream.writeObject(item);
				// One item at a time.
				for (int i = 0; i < config.itemNum; i++) {
					outputStream.writeObject(new DataItem(
							new byte[config.byteNum]));
					Thread.sleep(config.intermissionLength);
				}
				// null indicating the end of this Sensor's data
				outputStream.writeObject(null);

				outputStream.close();
				socketClient.close();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

}
